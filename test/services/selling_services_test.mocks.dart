// Mocks generated by Mockito 5.3.2 from annotations
// in smart_store/test/services/selling_services_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:smart_store/model/sales_model.dart' as _i4;
import 'package:smart_store/services/selling_services.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SellingServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockSellingServices extends _i1.Mock implements _i2.SellingServices {
  MockSellingServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Sales>> getdata() => (super.noSuchMethod(
        Invocation.method(
          #getdata,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Sales>>.value(<_i4.Sales>[]),
      ) as _i3.Future<List<_i4.Sales>>);
  @override
  _i3.Future<String> add(_i4.Sales? data) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<String> delete(_i4.Sales? data) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [data],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<String> updateItem(_i4.Sales? data) => (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [data],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}
