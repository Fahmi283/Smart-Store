// Mocks generated by Mockito 5.3.2 from annotations
// in smart_store/test/screen/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:smart_store/model/items_model.dart' as _i3;
import 'package:smart_store/model/sales_model.dart' as _i7;
import 'package:smart_store/provider/items_provider.dart' as _i2;
import 'package:smart_store/provider/selling_provider.dart' as _i6;
import 'package:smart_store/provider/theme_provider.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ItemsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemsProvider extends _i1.Mock implements _i2.ItemsProvider {
  @override
  List<_i3.Items> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: <_i3.Items>[],
        returnValueForMissingStub: <_i3.Items>[],
      ) as List<_i3.Items>);
  @override
  _i2.ViewState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i2.ViewState.none,
        returnValueForMissingStub: _i2.ViewState.none,
      ) as _i2.ViewState);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  dynamic changeState(_i2.ViewState? newState) => super.noSuchMethod(
        Invocation.method(
          #changeState,
          [newState],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<String> add(_i3.Items? data) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  void get() => super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<String> edit(_i3.Items? data) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [data],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  _i4.Future<String> updateStock(
    _i3.Items? data,
    int? sum,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStock,
          [
            data,
            sum,
          ],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  _i4.Future<String> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SellingProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSellingProvider extends _i1.Mock implements _i6.SellingProvider {
  @override
  List<_i7.Sales> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: <_i7.Sales>[],
        returnValueForMissingStub: <_i7.Sales>[],
      ) as List<_i7.Sales>);
  @override
  _i6.DataState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i6.DataState.none,
        returnValueForMissingStub: _i6.DataState.none,
      ) as _i6.DataState);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  dynamic changeState(_i6.DataState? newState) => super.noSuchMethod(
        Invocation.method(
          #changeState,
          [newState],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<String> add(_i7.Sales? data) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  void get() => super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<String> edit(_i7.Sales? data) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [data],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  _i4.Future<String> delete(_i7.Sales? data) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [data],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i8.ThemeProvider {
  @override
  bool get isdark => (super.noSuchMethod(
        Invocation.getter(#isdark),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
